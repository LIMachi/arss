import java.nio.file.Files

plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
}

version = "${mc_version}-B1.8"
group = 'com.limachi.arss'
archivesBaseName = 'arss'


java.toolchain.languageVersion = JavaLanguageVersion.of(17)

configurations.all {
    // Check for updates every build, usefull because i don't always bump the version of my lib while testing
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'official', version: "${mc_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'arss'

            mods {
                arss {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'arss'

            mods {
                arss {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'arss'

            mods {
                arss {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'arss', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                arss {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {

    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }

    maven { // TOP
        url "https://maven.k-4u.nl"
    }

    maven { url "https://maven.bai.lol" } //WAILA

    maven { url 'https://www.cursemaven.com' } //General Curse Maven

    maven {
        name "bytesafe"
        url "https://limachi.bytesafe.dev/maven/limlib/"
        credentials {
            username "bytesafe"
            password = Files.readAllLines(file("../bytesafe").toPath())[0]
        }
    }

    flatDir {
        dirs '../lim_lib/build/libs'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    dependencies {
//        implementation fg.deobf("com.limachi.lim_lib:lim_lib:${mc_version}-${lim_lib_version}") { changing = true }
        implementation fg.deobf("com.limachi.lim_lib:lim_lib-${mc_version}:${mc_version}-${lim_lib_version}") { changing = true }

        compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
        compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")
        runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-common:${jei_version}")
        runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")

        implementation(fg.deobf("curse.maven:the-one-probe-245211:${top_file}"))
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "arss",
                "Specification-Vendor"    : "limachi",
                "Specification-Version"   : project.jar.archiveVersion,
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "limachi",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
